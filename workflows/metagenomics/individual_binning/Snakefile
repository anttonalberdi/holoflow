# 30.06.20

rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])


################################################################################################################
#########################################     INDIVIDUAL ASSEMBLY     ##########################################
################################################################################################################


##
# Assembly
## Assembly is generated either with megahit or metaspades, chosen in config file.

rule assembly:
    input:
        read1="{projectpath}/PPR_03-MappedToReference/{sample}_1.fastq.gz",
        read2="{projectpath}/PPR_03-MappedToReference/{sample}_2.fastq.gz"
    output:
        "{projectpath}/MIB_01-Assembly/{sample}_file_to_remove"
    params:
        memory=expand("{memory}", memory=config['memory']),
        klist_megahit=expand("{klist_megahit}", klist_megahit=config['klist_megahit']),
        klist_spades=expand("{klist_spades}", klist_spades=config['klist_spades']),
        threads=expand("{threads}", threads=config['threads']),
        assembler=expand("{assembler}", assembler=config['assembler']),
        out_dir="{projectpath}/MIB_01-Assembly/{sample}_assembly",
        temp_assembly="{projectpath}/MIB_01-Assembly/{sample}_assembly/temp_assembly.fa",
        sample="{sample}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-assembly.py \
        -1 {input.read1} \
        -2 {input.read2} \
        -m {params.memory} \
        -t {params.threads} \
        -k_megahit {params.klist_megahit} \
        -k_spades {params.klist_spades} \
        -a {params.assembler} \
        -o {params.out_dir} \
        -empty_o {output} \
        -temp_a {params.temp_assembly} \
        -ID {params.sample} \
        -log {rules.get_paths.input.logpath}
        """

##
# Assembly reformat
##Contigs shorter than specified in min contig len parameter of config will be removed and the contigs will be renamed

rule assembly_reformat:
    input:
        empt_file="{projectpath}/MIB_01-Assembly/{sample}_file_to_remove"
    output:
        stats="{projectpath}/MIB_01-Assembly/{sample}.stats",
        out_assembly="{projectpath}/MIB_01-Assembly/{sample}.fa"
    params:
        sample="{sample}",
        stats_in="{projectpath}/PPR_03-MappedToReference/{sample}.stats",
        min_contig_len=expand("{min_contig_len}", min_contig_len=config['min_contig_len']),
        in_assembly="{projectpath}/MIB_01-Assembly/{sample}_assembly/temp_assembly.fa"
    shell:
        """
        rm {input.empt_file} && python {rules.get_paths.input.holopath}/bin/holo-assembly_reformat.py \
        -ID {params.sample} \
        -min_cl {params.min_contig_len} \
        -in_a {params.in_assembly} \
        -out_a {output.out_assembly} \
        -st_in {params.stats_in} \
        -st_out {output.stats} \
        -log {rules.get_paths.input.logpath}
        """


##
# Index assembly
## Coassembly is indexed with samtools and bowtie2
rule assembly_index:
    input:
        "{projectpath}/MIB_01-Assembly/{sample}.fa"
    output:
        samtools="{projectpath}/MIB_01-Assembly/{sample}.fa.fai",
        bwa_bt2="{projectpath}/MIB_01-Assembly/{sample}.fa.rev.2.bt2l",
    params:
        sample="{sample}"
    threads: 40
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-assembly_index.py \
        -a {input} \
        -ia {output.samtools} \
        -log {rules.get_paths.input.logpath} \
        -ID {params.sample}
        """

##
# Assembly mapping
## map metagenomic reads to coassembly file to obtain differential coverage in next rule

rule assembly_mapping:
    input:
        assembly="{projectpath}/MIB_01-Assembly/{sample}.fa",
        samtools="{projectpath}/MIB_01-Assembly/{sample}.fa.fai",
        read1="{projectpath}/PPR_03-MappedToReference/{sample}_1.fastq",
        read2="{projectpath}/PPR_03-MappedToReference/{sample}_2.fastq"
    output:
        "{projectpath}/MIB_02-AssemblyMapping/{sample}.mapped.bam"
    params:
        threads=expand("{threads}", threads=config['threads']),
        sample="{sample}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-assembly_mapping.py \
        -a {input.assembly} \
        -1 {input.read1} \
        -2 {input.read2} \
        -t {params.threads} \
        -obam {output} \
        -ID {params.sample} \
        -log {rules.get_paths.input.logpath}
        """
##
# Binning
##
rule metaWRAP_binning:
    input:
        "{projectpath}/MIB_02-AssemblyMapping/{sample}.mapped.bam"
    output:
        concoct=directory("{projectpath}/MIB_03-Binning/{sample}/concoct_bins"),
        maxbin2=directory("{projectpath}/MIB_03-Binning/{sample}/maxbin2_bins"),
        metabat2=directory("{projectpath}/MIB_03-Binning/{sample}/metabat2_bins"),
        coverm="{projectpath}/MIB_03-Binning/{sample}/coverM.txt")
    params:
        assembly="{projectpath}/MIB_01-Assembly/{sample}.fa",
        readfolder="{projectpath}/MIB_02-AssemblyMapping/{sample}",
        threads=expand("{threads}", threads=config['threads']),
        memory=expand("{memory}", memory=config['memory']),
        outdir="{projectpath}/MIB_03-Binning/{sample}",

    shell:
        """
        # Create dummy fastq/assembly files to trick metaWRAP into running without mapping
        mkdir {params.outdir}/work_files

        touch {params.outdir}/work_files/assembly.fa.bwt

        for bam in {input}; do echo "@" > {params.outdir}/work_files/$(basename ${{bam/.bam/_1.fastq}}); done
        for bam in {input}; do echo "@" > {params.outdir}/work_files/$(basename ${{bam/.bam/_2.fastq}}); done

        #Symlink BAMs for metaWRAP
        for bam in {input}; do ln -s $bam {params.outdir}/work_files/$(basename $bam); done

        # Run metaWRAP binning
        module load metawrap-mg/1.2 && \
        metawrap binning -o {params.outdir} \
            -t {params.threads} \
            -m {params.memory} \
            -a {params.assembly} \
            --metabat2 \
            --maxbin2 \
            --concoct \
            {params.outdir}/work_files/*_1.fastq {params.outdir}/work_files/*_2.fastq

        # Run coverm on each sample:
        module load tools coverm/0.6.1 && \
        coverm genome \
            -b {input}/ \
            --genome-fasta-files {params.assembly} \
            -m relative_abundance \
            -t {params.threads} \
            --min-covered-fraction 0 \
            > {output.coverm}
        """

rule metawrap_refinement:
    input:
        concoct="{projectpath}/MIB_03-Binning/{sample}/concoct_bins",
        maxbin2="{projectpath}/MIB_03-Binning/{sample}/maxbin2_bins",
        metabat2="{projectpath}/MIB_03-Binning/{sample}/metabat2_bins",
    output:
        stats="{projectpath}/MIB_04-BinMerging/{sample}_files/metawrap_70_10_bins.stats",
        workdir=directory("{projectpath}/MIB_04-BinMerging/{sample}_files")
    params:
        threads=expand("{threads}", threads=config['threads']),
        memory=expand("{memory}", memory=config['memory']),
        sample="{sample}"
    shell:
        """
        module load metawrap-mg/1.2 && \
        metawrap bin_refinement \
            -m {params.memory} \
            -t {params.threads} \
            -o {output.workdir} \
            -t {params.threads} \
            -A {input.concoct} \
            -B {input.maxbin2} \
            -C {input.metabat2} \
            -c 70 \
            -x 10
        # Rename metawrap bins to match coassembly group:
        sed -i'' '2,$s/bin/bin_{params.sample}/g' {output.stats}
        """

rule merge_coverM:
    input:
        expand("{projectpath}/MIB_04-BinMerging/{sample}_files/metawrap_70_10_bins.stats", sample=SAMPLE)
    output:
        coverm="{projectpath}/MIB_05-CoverM/coverM_all.txt",
        covermdir=directory("{projectpath}/MIB_05-CoverM")
    params:
        threads=expand("{threads}", threads=config['threads']),
        job=expand("{job}", job=config['job']),
    shell:
        """
        touch {output.covermdir}/{params.job}/coverM_{params.job}.txt
        """
