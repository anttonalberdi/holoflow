# 30.06.20

rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])


################################################################################################################
#########################################     INDIVIDUAL ASSEMBLY     ##########################################
################################################################################################################


##
# Assembly
## Assembly is generated either with megahit or metaspades, chosen in config file.

rule assembly:
    input:
        read1="{projectpath}/PPR_03-MappedToReference/{sample}_1.fastq",
        read2="{projectpath}/PPR_03-MappedToReference/{sample}_2.fastq"

    output:
        "{projectpath}/MIB_01-Assembly/{sample}_file_to_remove"
    params:
        memory=expand("{memory}", memory=config['memory']),
        klist_megahit=expand("{klist_megahit}", klist_megahit=config['klist_megahit']),
        klist_spades=expand("{klist_spades}", klist_spades=config['klist_spades']),
        threads=expand("{threads}", threads=config['threads']),
        assembler=expand("{assembler}", assembler=config['assembler']),
        out_dir="{projectpath}/MIB_01-Assembly/{sample}_assembly",
        temp_assembly="{projectpath}/MIB_01-Assembly/{sample}_assembly/temp_assembly.fa",
        sample="{sample}"

    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-assembly.py -1 {input.read1} -2 {input.read2} -m {params.memory} -t {params.threads} -k_megahit {params.klist_megahit} -k_spades {params.klist_spades} -a {params.assembler} -o {params.out_dir} -empty_o {output} -temp_a {params.temp_assembly} -ID {params.sample} -log {rules.get_paths.input.logpath}
        """


##
# Assembly reformat
##Contigs shorter than specified in min contig len parameter of config will be removed and the contigs will be renamed

rule assembly_reformat:
    input:
        empt_file="{projectpath}/MIB_01-Assembly/{sample}_file_to_remove"
    output:
        stats="{projectpath}/MIB_01-Assembly/{sample}.stats",
        out_assembly="{projectpath}/MIB_01-Assembly/{sample}.fa"
    params:
        sample="{sample}",
        stats_in="{projectpath}/PPR_03-MappedToReference/{sample}.stats",
        min_contig_len=expand("{min_contig_len}", min_contig_len=config['min_contig_len']),
        in_assembly="{projectpath}/MIB_01-Assembly/{sample}_assembly/temp_assembly.fa"


    shell:
        """
        rm {input.empt_file} && python {rules.get_paths.input.holopath}/bin/holo-assembly_reformat.py -ID {params.sample} -min_cl {params.min_contig_len} -in_a {params.in_assembly} -out_a {output.out_assembly} -st_in {params.stats_in} -st_out {output.stats} -log {rules.get_paths.input.logpath}
        """


##
# Index assembly
## Coassembly is indexed with samtools and bwa
rule assembly_index:
    input:
        "{projectpath}/MIB_01-Assembly/{sample}.fa"
    output: # FUTURE: ADD OPTION TO REMOVE ALL BUT FA.FAI
        samtools="{projectpath}/MIB_01-Assembly/{sample}.fa.fai",
        bwa_bwt="{projectpath}/MIB_01-Assembly/{sample}.fa.bwt",
        bwa_pac="{projectpath}/MIB_01-Assembly/{sample}.fa.pac",
        bwa_ann="{projectpath}/MIB_01-Assembly/{sample}.fa.ann",
        bwa_amb="{projectpath}/MIB_01-Assembly/{sample}.fa.amb",
        bwa_sa="{projectpath}/MIB_01-Assembly/{sample}.fa.sa"
    params:
        sample="{sample}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-assembly_index.py -a {input} -ia {output.samtools} -log {rules.get_paths.input.logpath} -ID {params.sample}
        """

##
# Assembly mapping
## map metagenomic reads to coassembly file to obtain differential coverage in next rule

rule assembly_mapping:
    input:
        assembly="{projectpath}/MIB_01-Assembly/{sample}.fa",
        samtools="{projectpath}/MIB_01-Assembly/{sample}.fa.fai",
        read1="{projectpath}/PPR_03-MappedToReference/{sample}_1.fastq",
        read2="{projectpath}/PPR_03-MappedToReference/{sample}_2.fastq"
    output:
        "{projectpath}/MIB_02-AssemblyMapping/{sample}.mapped.bam"
    params:
        threads=expand("{threads}", threads=config['threads']),
        sample="{sample}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-assembly_mapping.py -a {input.assembly} -1 {input.read1} -2 {input.read2} -t {params.threads} -obam {output} -ID {params.sample} -log {rules.get_paths.input.logpath}
        """

##
# Prodigal ORF prediction
##
#"Metagenomes - The simplest approach for metagenomes is to put all the sequences in one FASTA file and analyze them in Anonymous Mode."
# rule protein_prediction_prodigal:
#     input:
#         assembly="{projectpath}/MIB_01-Assembly/{sample}.fa",
#         mapped_bam="{projectpath}/MIB_02-AssemblyMapping/{sample}.mapped.bam" # not necessary
#     output:
#         genetic_coords="{projectpath}/MIB_02-ProdigalPrediction/{sample}.coords.gbk",
#         protein_translations="{projectpath}/MIB_02-ProdigalPrediction/{sample}.protein_translations.faa"
#     params:
#         sample="{sample}"
#     shell: # Prodigal is run in "anon", Anonymous workflow
#         """
#         python {rules.get_paths.input.holopath}/bin/holo-pp_prodigal.py -i {input.assembly} -o {output.genetic_coords} -a {output.protein_translations} -ID {params.sample} -log {rules.get_paths.input.logpath}
#         """

##
# Create depth table
## Create depth table from bam files
rule depth_table:
    input:
        #genetic_coords="{projectpath}/MIB_02-ProdigalPrediction/{sample}.coords.gbk",  #not actually necessary here, but used to keep order
        mapped_bam="{projectpath}/MIB_02-AssemblyMapping/{sample}.mapped.bam"
    output:
        metabat_depth_file="{projectpath}/MIB_03-Binning/{sample}_metabat/{sample}.depth.txt",
        maxbin_depth_file="{projectpath}/MIB_03-Binning/{sample}_maxbin/{sample}.depth.txt"
    params:
        sample="{sample}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-depth_files.py -bam {input.mapped_bam} -mtb {output.metabat_depth_file} -mxb {output.maxbin_depth_file} -ID {params.sample} -log {rules.get_paths.input.logpath}
        """


##
# Binning with metabat
##

rule binning_metabat:
    input:
        assembly="{projectpath}/MIB_01-Assembly/{sample}.fa",
        depth_table="{projectpath}/MIB_03-Binning/{sample}_metabat/{sample}.depth.txt"
    output:
        check_mtb="{projectpath}/MIB_03-Binning/{sample}_metabat/{sample}.mtb_checked_bins"
    params:
        base_mtb="{projectpath}/MIB_03-Binning/{sample}_metabat/{sample}.mtb",
        bin_table_mtb="{projectpath}/MIB_03-Binning/{sample}.bins_metabat.txt",
        threads=expand("{threads}", threads=config['threads']),
        sample="{sample}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-binning_metabat.py -a {input.assembly} -d {input.depth_table} -bt {params.bin_table_mtb} -bb {params.base_mtb} -t {params.threads} -ID {params.sample} -log {rules.get_paths.input.logpath}
        """


##
# Binning with maxbin
##

rule binning_maxbin:
    input:
        assembly="{projectpath}/MIB_01-Assembly/{sample}.fa",
        depth_table="{projectpath}/MIB_03-Binning/{sample}_maxbin/{sample}.depth.txt"
    output:
        check_mxb="{projectpath}/MIB_03-Binning/{sample}_maxbin/{sample}.mxb_checked_bins"
    params:
        base_mxb="{projectpath}/MIB_03-Binning/{sample}_maxbin/{sample}.mxb",
        bin_table_mxb="{projectpath}/MIB_03-Binning/{sample}.bins_maxbin.txt",
        threads=expand("{threads}", threads=config['threads']),
        sample="{sample}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-binning_maxbin.py -a {input.assembly} -d {input.depth_table} -bt {params.bin_table_mxb} -bb {params.base_mxb} -t {params.threads} -ID {params.sample} -log {rules.get_paths.input.logpath}
        """

##
# Check binning
## If all binners created bins, then continue. If Any binner did not create bins, simply copy resulting bins from
# another software, rename these, and continue (the result is going to be the same for DAStool, is for the sake of the pipeline)

rule check_bins:
    input:
        check_mxb="{projectpath}/MIB_03-Binning/{sample}_maxbin/{sample}.mxb_checked_bins",
        check_mtb="{projectpath}/MIB_03-Binning/{sample}_metabat/{sample}.mtb_checked_bins",
    output:
        "{projectpath}/MIB_03-Binning/{sample}_checked_bins.txt"
    params:
        binning_dir="{projectpath}/MIB_03-Binning",
        sample="{sample}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-check_bins.py -check_mtb {input.check_mtb} -check_mxb {input.check_mxb}  -binning_dir {params.binning_dir} -ID {params.sample} -log {rules.get_paths.input.logpath}
        """


##
# Bin refinement with DASTool using binning: metabat, maxbin 
##

rule das_tool:
    input:
        checked_bins="{projectpath}/MIB_03-Binning/{sample}_checked_bins.txt",
        assembly="{projectpath}/MIB_01-Assembly/{sample}.fa"#,
        #pproteins="{projectpath}/MIB_02-ProdigalPrediction/{sample}.protein_translations.faa"
    output:
        directory("{projectpath}/MIB_04-BinMerging/{sample}_DASTool_files")
    params:
        threads=expand("{threads}", threads=config['threads']),
        search_eng=expand("{search_eng}", search_eng=config['search_eng']),
        dastool_db=expand("{dastool_db}", dastool_db=config['dastool_db']),
        dastool_dir="{projectpath}/MIB_04-BinMerging/{sample}",
        bin_table_mxb="{projectpath}/MIB_03-Binning/{sample}.bins_maxbin.txt",
        bin_table_mtb="{projectpath}/MIB_03-Binning/{sample}.bins_metabat.txt",
        sample="{sample}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-binning_dastool.py -cb {input.checked_bins} -a {input.assembly} -bt_mtb {params.bin_table_mtb} -bt_mxb {params.bin_table_mxb} -o {params.dastool_dir} -se {params.search_eng} -t {params.threads} -db {params.dastool_db} -ID {params.sample} -log {rules.get_paths.input.logpath}
        """
        #        python {rules.get_paths.input.holopath}/bin/holo-binning_dastool_TMP.py -cb {input.checked_bins} -a {input.assembly} -bt_mtb {params.bin_table_mtb} -bt_mxb {params.bin_table_mxb} -p {input.pproteins} -o {params.dastool_dir} -se {params.search_eng} -t {params.threads} -db {params.dastool_db} -ID {params.sample} -log {rules.get_paths.input.logpath}



##
# RefineM bin refinement
##
#>refinem filter_bins <bin_dir> <outlier_output_dir>/outliers.tsv <filtered_output_dir>
# rule bin_refinement:
#     input:
#         assembly="{projectpath}/MIB_01-Assembly/{sample}.fa",
#         assembly_map="{projectpath}/MIB_02-AssemblyMapping/{sample}.mapped.bam",
#         check_dastool="{projectpath}/MIB_04-BinMerging/{sample}_DASTool_bins"
#     output:
#         directory("{projectpath}/MIB_05-BinRefinement/{sample}")
#     params:
#         dastool_bin_dir="{projectpath}/MIB_04-BinMerging/{sample}_DASTool_bins",
#         threads=expand("{threads}", threads=config['threads']),
#         sample="{sample}"
#     shell:
#         """
#         python {rules.get_paths.input.holopath}/bin/holo-bin_refinement.py -a {input.assembly} -bam {input.assembly_map} -dastool_bd {params.dastool_bin_dir} -out_dir {output} -ID {params.sample} -t {params.threads} -log {rules.get_paths.input.logpath}
#         """
