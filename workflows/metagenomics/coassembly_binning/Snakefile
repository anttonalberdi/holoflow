 # 30.06.20

rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])


################################################################################################################
 ############################################       COASSEMBLY     ############################################
################################################################################################################



##
# Assembly
## Coassembly is generated either with megahit or metaspades, chosen in config file. Megahit handles better big datasets.
rule assembly:
    input:
        read1="{projectpath}/MCB_00-MergedData/{group}_1.fastq",
        read2="{projectpath}/MCB_00-MergedData/{group}_2.fastq"
    output:
        "{projectpath}/MCB_01-Assembly/{group}_file_to_remove"
    params:
        coassembly=expand("{coassembly}", coassembly=config['coassembly']),
        klist_megahit=expand("{klist_megahit}", klist_megahit=config['klist_megahit']),
        klist_spades=expand("{klist_spades}", klist_spades=config['klist_spades']),
        threads=expand("{threads}", threads=config['threads']),
        assembler=expand("{assembler}", assembler=config['assembler']),
        out_dir="{projectpath}/MCB_01-Assembly/{group}_assembly",
        temp_assembly="{projectpath}/MCB_01-Assembly/{group}_assembly/temp_assembly.fa",
        memory=expand("{memory}", memory=config['memory']),
        group="{group}"

    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-assembly.py \
        -1 {input.read1} -2 {input.read2} \
        -a {params.assembler} \
        -coa {params.coassembly} \
        -m {params.memory} \
        -t {params.threads} \
        -k_megahit {params.klist_megahit} \
        -k_spades {params.klist_spades} \
        -o {params.out_dir} \
        -empty_o {output} \
        -temp_a {params.temp_assembly} \
        -ID {params.group} \
        -log {rules.get_paths.input.logpath}
        """

##
# Assembly reformat
##Contigs shorter than specified in min contig len parameter of config will be removed and the contigs will be renamed
rule assembly_reformat:
    input:
        empt_file="{projectpath}/MCB_01-Assembly/{group}_file_to_remove"
    output:
        stats="{projectpath}/MCB_01-Assembly/{group}.stats",
        out_assembly="{projectpath}/MCB_01-Assembly/{group}.fa"
    params:
        group="{group}",
        stats_in="{projectpath}/PPR_03-MappedToReference/{group}.stats",
        min_contig_len=expand("{min_contig_len}", min_contig_len=config['min_contig_len']),
        in_assembly="{projectpath}/MCB_01-Assembly/{group}_assembly/temp_assembly.fa"
    shell:
        """
        rm {input.empt_file} && \
        python {rules.get_paths.input.holopath}/bin/holo-assembly_reformat.py \
        -ID {params.group} \
        -min_cl {params.min_contig_len} \
        -in_a {params.in_assembly} \
        -out_a {output.out_assembly} \
        -st_in {params.stats_in} \
        -st_out {output.stats} \
        -log {rules.get_paths.input.logpath}
        """


##
# Index assembly
## Coassembly is indexed with samtools and bwa
rule assembly_index:
    input:
        "{projectpath}/MCB_01-Assembly/{group}.fa"
    output:
        bt2_index="{projectpath}/MCB_01-Assembly/{group}.fa.rev.2.bt2l",
        samtools="{projectpath}/MCB_01-Assembly/{group}.fa.fai"
        # bwa_bwt="{projectpath}/MCB_01-Assembly/{group}.fa.bwt",
        # bwa_pac="{projectpath}/MCB_01-Assembly/{group}.fa.pac",
        # bwa_ann="{projectpath}/MCB_01-Assembly/{group}.fa.ann",
        # bwa_amb="{projectpath}/MCB_01-Assembly/{group}.fa.amb",
        # bwa_sa="{projectpath}/MCB_01-Assembly/{group}.fa.sa"
    threads: 40
    params:
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-assembly_index.py \
        -a {input} \
        -ia {output.samtools} \
        -bt2i {output.bt2_index} \
        -log {rules.get_paths.input.logpath} \
        -ID {params.group}
        """

##
# Assembly mapping
## map metagenomic reads to coassembly file to obtain differential coverage in next rule

rule assembly_mapping:
    input:
        bt2_index="{projectpath}/MCB_01-Assembly/{group}.fa.rev.2.bt2l",
        assembly="{projectpath}/MCB_01-Assembly/{group}.fa",
    output:
        directory("{projectpath}/MCB_02-AssemblyMapping/{group}")
    params:
        threads=expand("{threads}", threads=config['threads']),
        outdir="{projectpath}/MCB_02-AssemblyMapping/{group}",
        fq_path="{projectpath}/PPR_03-MappedToReference/{group}",
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-coassembly_mapping.py \
        -a {input.assembly} \
        -fq_path {params.fq_path} \
        -t {params.threads} \
        -obam_b {params.outdir} \
        -ID {params.group} \
        -log {rules.get_paths.input.logpath}
        """


rule metaWRAP_binning:
    input:
        "{projectpath}/MCB_02-AssemblyMapping/{group}"
    output:
        concoct=directory("{projectpath}/MCB_03-Binning/{group}/concoct_bins"),
        maxbin2=directory("{projectpath}/MCB_03-Binning/{group}/maxbin2_bins"),
        metabat2=directory("{projectpath}/MCB_03-Binning/{group}/metabat2_bins")
    params:
        assembly="{projectpath}/MCB_01-Assembly/{group}.fa",
        readfolder="{projectpath}/MCB_02-AssemblyMapping/{group}",
        threads=expand("{threads}", threads=config['threads']),
        memory=expand("{memory}", memory=config['memory']),
        outdir="{projectpath}/MCB_03-Binning/{group}",

    shell:
        """
        # Create dummy fastq/assembly files to trick metaWRAP into running without mapping
        mkdir {params.outdir}/work_files

        touch {params.outdir}/work_files/assembly.fa.bwt

        for bam in {input}/*.bam; do echo "@" > {params.outdir}/work_files/$(basename ${{bam/.bam/_1.fastq}}); done
        for bam in {input}/*.bam; do echo "@" > {params.outdir}/work_files/$(basename ${{bam/.bam/_2.fastq}}); done

        #Symlink BAMs for metaWRAP
        for bam in {input}/*.bam; do ln -s $bam {params.outdir}/work_files/$(basename $bam); done

        # Run metaWRAP binning
        module load metawrap-mg/1.2 && \
        metawrap binning -o {params.outdir} \
        -t {params.threads} \
        -m {params.memory} \
        -a {params.assembly} \
        --metabat2 \
        --maxbin2 \
        --concoct \
        {params.outdir}/work_files/*_1.fastq {params.outdir}/work_files/*_2.fastq
        """


rule metawrap_refinement:
    input:
        concoct="{projectpath}/MCB_03-Binning/{group}/concoct_bins",
        maxbin2="{projectpath}/MCB_03-Binning/{group}/maxbin2_bins",
        metabat2="{projectpath}/MCB_03-Binning/{group}/metabat2_bins",
    output:
        stats="{projectpath}/MCB_04-BinMerging/{group}_files/metawrap_70_10_bins.stats",
        workdir=directory("{projectpath}/MCB_04-BinMerging/{group}_files")
    params:
        threads=expand("{threads}", threads=config['threads']),
        memory=expand("{memory}", memory=config['memory']),
        group="{group}"
    shell:
        """
        module load metawrap-mg/1.2 && \
        metawrap bin_refinement \
            -m {params.memory} \
            -t {params.threads} \
            -o {output.workdir} \
            -t {params.threads} \
            -A {input.concoct} \
            -B {input.maxbin2} \
            -C {input.metabat2} \
            -c 70 \
            -x 10
        # Rename metawrap bins to match coassembly group:
        sed -i'' '2,$s/bin/bin_{params.group}/g' {output.stats}
        """


rule coverm:
    input:
        "{projectpath}/MCB_04-BinMerging/{group}_files/metawrap_70_10_bins.stats"
    output:
        coverm="{projectpath}/MCB_05-CoverM/{group}_files/{group}_coverM.txt",
        covermdir=directory("{projectpath}/MCB_05-CoverM/{group}_files")
    params:
        all_mw="{projectpath}/MCB_04-BinMerging/All_files",
        groups="{projectpath}/MCB_04-BinMerging/{group}",
        assembly="{projectpath}/MCB_01-Assembly/{group}.fa",
        mapped_bams="{projectpath}/MCB_02-AssemblyMapping/{group}",
        threads=expand("{threads}", threads=config['threads']),
        group="{group}"
    shell:
        """
        echo {input}
        module load tools coverm/0.6.1 && \
        coverm genome \
            -b {params.mapped_bams}/*.bam \
            --genome-fasta-files {params.assembly} \
            -m relative_abundance \
            -t {params.threads} \
            --min-covered-fraction 0 \
            > {output.coverm}

        #Merge group metaWRAP refinement results
        mkdir -p {params.all_mw}

        #setup headers for combined metawrap file:
        echo -e bin' \t 'completeness' \t 'contamination' \t 'GC' \t 'lineage' \t 'N50' \t 'size' \t 'binner > {params.all_mw}/header.txt

        #Cat the bin info from each group together
        grep -v 'contamination' {params.groups}_files/metawrap_70_10_bins.stats >> {params.all_mw}/{params.group}_metawrap_70_10_bins.stats

        cat {params.all_mw}/header.txt {params.all_mw}/{params.group}_metawrap_70_10_bins.stats > {params.all_mw}/All_metawrap_70_10_bins.stats

        #Copy bins from each group to a new folder in the 'All_files' directory
        mkdir -p {params.all_mw}/All_metawrap_70_10_bins

        for group in {params.groups}; \
            do for bin in "$group"_files/metawrap_70_10_bins/*.fa; \
                do cp $bin {params.all_mw}/All_metawrap_70_10_bins/$(basename ${{bin/bin/bin_"${{group/_files/}}"}}); \
                    done; \
                        done
        """


# rule singleM:
#     input:
#         "{projectpath}/MCB_04-BinMerging/All_files/metawrap_50_10_bins.stats"
#     output:
#         "{projectpath}/MCB_05-SingleM/{group}/<><><><>")
#     params:
#         threads=expand("{threads}", threads=config['threads']),
#         group="{group}"
#     conda:
#         "{holopath}/workflows/metagenomics/coassembly_binning/conda.yaml"
#     shell:
#         """
#
#         """

# onsuccess:
#     print("Job success!")
#     shell("""
#             mail -s "workflow completed" raph.eisenhofer@gmail.com < {log}
#             cat headers.txt *bins.txt > {path}/MCB_04-BinMerging/All_files/All_metawrap_70_10_bins.stats
#             rm headers.txt
#             rm *bins.txt
#           """)
#
# onerror:
#     print("An error occurred")
#     shell("""mail -s "an error occurred" raph.eisenhofer@gmail.com < {log}""")
