# 08.10.20
# Metagenomics dereplication

rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])



################################################################################################################
###########################################       DEREPLICATION     ############################################
################################################################################################################


##
# dRep bin dereplication
## Dereplicate the bin catalogue generated by the binning workflows (individual_binning/coassembly_binning or both)
rule drep_bins:
    input:
        metawrap_bin_dir="{projectpath}/MDR_00-InputBins/{group}"
    output:
        directory("{projectpath}/MDR_01-BinDereplication/{group}")
    params:
        threads=expand("{threads}", threads=config['threads']),
        ani=expand("{ani}", ani=config['ani']),
        mincomp=expand("{mincomp}", mincomp=config['mincomp']),
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-bin_drep.py \
        -mw_bd {input.metawrap_bin_dir} \
        -out_dir {output} \
        -t {params.threads} \
        -ID {params.group} \
        -min_comp {params.mincomp} \
        -ani {params.ani} \
        -log {rules.get_paths.input.logpath}
        """

##
# Prokka gene annotation
## Predict genes and functionally annotate in each bin
rule annotation:
    input:
        drep_bin_dir="{projectpath}/MDR_01-BinDereplication/{group}"
    output:
        directory("{projectpath}/MDR_02-BinAnnotation/{group}")
    params:
        threads=expand("{threads}", threads=config['threads']),
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-bin_annotation.py \
        -bin_dir {input.drep_bin_dir} \
        -out_dir {output} -t {params.threads} \
        -ID {params.group} \
        -log {rules.get_paths.input.logpath}
        """

##
# GTDBTk phylogenetic analysis
## Annotate taxonomically the bins
rule phylogeny:
    input:
        prokka_output="{projectpath}/MDR_02-BinAnnotation/{group}", # not necessary for gtdbtk but necessary for creating dependency between rules
        drep_bin_dir="{projectpath}/MDR_01-BinDereplication/{group}"
    output:
        directory("{projectpath}/MDR_03-BinPhylogeny/{group}")
    params:
        threads=expand("{threads}", threads=config['threads']),
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-bin_phylogeny.py \
        -genome_dir {input.drep_bin_dir} \
        -out_dir {output} -t {params.threads} \
        -ID {params.group} \
        -log {rules.get_paths.input.logpath}
        """

##
# GTDBTk phylogenetic subtree generation
## Generate subtree from outputted GTDBTk's, only with bins not with gtdb reference tree
rule subtree:
    input:
        gtdbtk="{projectpath}/MDR_03-BinPhylogeny/{group}"
    output:
        bac_subtree="{projectpath}/MDR_03-BinPhylogeny/{group}_BAC_Holoflow.gtdbtk_sub.tree",
        ar_subtree="{projectpath}/MDR_03-BinPhylogeny/{group}_AR_Holoflow.gtdbtk_sub.tree"
    params:
        group="{group}",
        tree_dir="{projectpath}/MDR_03-BinPhylogeny/{group}/classify", # if I specify these paths in input, Snakemake complains child direcotry error
        drep_bin_dir="{projectpath}/MDR_01-BinDereplication/{group}/dereplicated_genomes",
#        drep_bin_dir_base="{projectpath}/MDR_01-BinDereplication/{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-bin_subtree.py \
        -tree_dir {params.tree_dir} \
        -bin_dir {params.drep_bin_dir} \
        -bac_o {output.bac_subtree} \
        -ID {params.group} \
        -ar_o {output.ar_subtree} \
        -log {rules.get_paths.input.logpath}
        """
#
##
# Bin traits annotation
##
# rule traits:
#     input:
#         ar_subtree="{projectpath}/MDR_03-BinPhylogeny/{group}_AR_Holoflow.gtdbtk_sub.tree" # create continuity
#     output:
#         trait_annot_path="{projectpath}/MDR_03-BinPhylogeny/{group}_BIN_trait.annot.csv"
#     params:
#         ar="{projectpath}/MDR_03-BinPhylogeny/{group}/classify/gtdbtk.ar122.summary.tsv",
#         bac="{projectpath}/MDR_03-BinPhylogeny/{group}/classify/gtdbtk.bac120.summary.tsv",
#         group="{group}"
#     shell:
#         """
#         Rscript {rules.get_paths.input.holopath}/bin/holo-bin_traits.R -ar_summ {params.ar} -bac_summ {params.bac} -out_file {output} -ID {params.group}
#         """
