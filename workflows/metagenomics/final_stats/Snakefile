# 08.10.20
# Metagenomics dereplication

rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])



################################################################################################################
###########################################      FINAL STATISTICS     ###########################################
################################################################################################################


##
# Map MAGs to original metagenomic fastq files
## A MAG catalogue file is created to which sample reads are to be mapped competitively.
## A set of bam files, one per sample, is created and a file outputting % of reads recovered from each sample as well.

rule mag_mapping:
    input:
        drep_bin_dir="{projectpath}/MFS_00-InputData/{group}/dereplicated_bins",
        read_dir="{projectpath}/MFS_00-InputData/{group}/metagenomic_reads"
    output:
        out_dir_mc=directory("{projectpath}/MFS_01-MAGCatalogue/{group}"),
        out_dir_map=directory("{projectpath}/MFS_02-MAGMapped/{group}"),
        out_dir_ummap=directory("{projectpath}/MFS_02-MAGUnMapped/{group}")
    params:
        threads=expand("{threads}", threads=config['threads']),
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-MAG_mapping.py \
        -fq_dir {input.read_dir} \
        -bin_dir {input.drep_bin_dir} \
        -out_dir {output.out_dir_map} \
        -t {params.threads} \
        -ID {params.group} \
        -log {rules.get_paths.input.logpath}
        """
################################################################################################################

rule coverm:
    input:
        in_dir_map="{projectpath}/MFS_02-MAGMapped/{group}"
    output:
        relab="{projectpath}/MFS_03-MAGcoverage/{group}/{group}_relative_abundance.txt",
        maglength="{projectpath}/MFS_03-MAGcoverage/{group}/{group}_MAG_length.txt",
        readcount="{projectpath}/MFS_03-MAGcoverage/{group}/{group}_count.txt"
    params:
        threads=expand("{threads}", threads=config['threads']),
        group="{group}"
    shell:
        """
        module load tools coverm/0.6.1 && \
        coverm genome \
            -b {input.in_dir_map}/*.bam \
            -s - \
            -m count \
            --min-covered-fraction 0 \
            > {output.readcount}
        coverm genome \
            -b {input.in_dir_map}/*.bam \
            -s - \
            -m relative_abundance \
            --min-covered-fraction 50 \
            > {output.relab}
        coverm genome \
            -b {input.in_dir_map}/*.bam \
            -s - \
            -m length \
            --min-covered-fraction 0 \
            > {output.maglength}
        """
################################################################################################################


# Get MAG coverage for each sample
## Using the previously generated bam files, for each bam the coverage of each mag is extracted.

# rule coverage:
#     input:
#         drep_bin_dir="{projectpath}/MFS_00-InputData/{group}/dereplicated_bins",
#         bam_MAGs="{projectpath}/MFS_02-MAGMapped/{group}"
#     output:
#         contig="{projectpath}/MFS_03-MAGCoverage/{group}/{group}.coverage_byContig.txt",
#         mag="{projectpath}/MFS_03-MAGCoverage/{group}/{group}.coverage_byMAG.txt",
#         raw="{projectpath}/MFS_03-MAGCoverage/{group}/{group}.rawmapping_byMAG.txt"
#     params:
#         threads=expand("{threads}", threads=config['threads']),
#         out_dir="{projectpath}/MFS_03-MAGCoverage",
#         group="{group}"
#     shell:
#         """
#         python {rules.get_paths.input.holopath}/bin/holo-MAG_coverage.py \
#         -bam_dir {input.bam_MAGs} \
#         -mag_dir {input.drep_bin_dir}  \
#         -out_dir {params.out_dir} \
#         -t {params.threads} \
#         -ID {params.group} \
#         -log {rules.get_paths.input.logpath}
#         """

##
# CheckM quality of MAGs + generate summary table
# #
# rule checkm:
#     input:
#         cov="{projectpath}/MFS_03-MAGCoverage/{group}/{group}.coverage_byMAG.txt",
#         drep_bin_dir="{projectpath}/MFS_00-InputData/{group}/dereplicated_bins",
#     output:
#         "{projectpath}/MFS_04-BinQuality/{group}/{group}_binQuality_general_Info.csv",
#         directory("{projectpath}/MFS_04-BinQuality/{group}")
#     params:
#         threads=expand("{threads}", threads=config['threads']),
#         out_dir="{projectpath}/MFS_04-BinQuality/{group}",
#         group="{group}"
#     shell:
#         """
#         python {rules.get_paths.input.holopath}/bin/holo-bin_quality.py \
#         -cov_file {input.cov} \
#         -bin_dir {input.drep_bin_dir} \
#         -out_dir {params.out_dir} \
#         -t {params.threads} \
#         -ID {params.group} \
#         -log {rules.get_paths.input.logpath}
#         """
#

##
# Get MAG coverage on SELECTED KOs (single-copy core genes: https://github.com/anttonalberdi/metafunk/blob/master/files/USiCGs.txt)
##
### Needs optimization
# This is now calculated with htseq-counts, but would probably be more efficient with samtools
# Too many files are generated and even though it is parallelized it can take a long time.

# rule genes_coverage:
#     input:
#         quality="{projectpath}/MFS_04-BinQuality/{group}/{group}_binQuality_general_Info.csv", # unnecessary for this rule, necessary for creating dependence
#         drep_bin_dir="{projectpath}/MFS_00-InputData/{group}/dereplicated_bins",
#         annot_dir="{projectpath}/MFS_00-InputData/{group}/annotation",
#         bam_dir="{projectpath}/MFS_02-MAGMapped/{group}"
#     output:
#         directory("{projectpath}/MFS_05-KOAbundances/{group}")
#     params:
#         threads=expand("{threads}", threads=config['threads']),
#         KO_DB=expand("{KO_DB}", KO_DB=config['KO_DB']),
#         KO_list="{rules.get_paths.input.holopath}/workflows/metagenomics/final_stats/KO_list.txt",
#         group="{group}"
#     shell:
#         """
#         python {rules.get_paths.input.holopath}/bin/holo-MAG_map_split.py -mag_dir {input.drep_bin_dir} -bam_dir {input.bam_dir} -annot_dir {input.annot_dir} -out_dir {output} -KO_db {params.KO_DB} -KO_list {params.KO_list} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
#         """
