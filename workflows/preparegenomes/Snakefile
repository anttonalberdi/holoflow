
rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])


################################################################################################################
############################################       PREPAREGENOMES     ###########################################
################################################################################################################

##
# DB indexing
## Index db created by concatenating all reference genomes with bowtie2

rule db_index:
    input:
        db_path=expand("{DB_path}", DB_path=config['DB_path'])
    threads: 39
    output:
        idx_db_bt2="{projectpath}/PRG/{db_ID}.rev.2.bt2l",
        idx_db_samtools="{projectpath}/PRG/{db_ID}.fna.fai"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-db_index.py \
        -db {input.db_path} \
        -idx_bt2 {output.idx_db_bt2} \
        -idx_smt {output.idx_db_samtools} \
        -log {rules.get_paths.input.logpath}
        """

## Check all files necessary exist, then create .tar.gz file with everything
rule check_compress:
    input:
        db_path=expand("{DB_path}", DB_path=config['DB_path']),
        idx_db="{projectpath}/PRG/{db_ID}.rev.2.bt2l"
    output:
        check_file="{projectpath}/{db_ID}.tar.gz"
    params:
        db_dir="{projectpath}/PRG",
        db_ID="{db_ID}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-check_compress.py \
        -db {input.db_path} \
        -idx_db {input.idx_db} \
        -check {output.check_file} \
        -db_dir {params.db_dir} \
        -db_ID {params.db_ID} \
        -log {rules.get_paths.input.logpath}
        """
