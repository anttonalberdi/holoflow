# 15.12.20

rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])



################################################################################################################
##########################################       VARIANT CALLING     ###########################################
################################################################################################################



# BCFtools as variant caller - selected by user in .py launcher command and then uploaded to config file by .py launcher

if config['var_caller'] == "bcftools":

    ##
    # call variants with BCFtools
    ##
    rule bcf_run:
        input:
            "{projectpath}/GNM_00-InputBams/{group}"
        output:
            directory("{projectpath}/GNM_01-CalledVar/{group}")
        params:
            degr_mapp_qual=expand("{degr_mapp_qual}", degr_mapp_qual=config['degr_mapp_qual']),
            min_mapp_qual=expand("{min_mapp_qual}", min_mapp_qual=config['min_mapp_qual']),
            min_base_qual=expand("{min_base_qual}", min_base_qual=config['min_base_qual']),
            multicaller=expand("{multicaller}", multicaller=config['multicaller']),
            not_indels=expand("{not_indels}", not_indels=config['not_indels']),
            ref_genome=expand("{reference_genome}", reference_genome=config['reference_genome']),
            chr_list=expand("{chr_list}", chr_list=config['chr_list']),
            data_quality=expand("{data_quality}", data_quality=config['data_quality']),
            group="{group}",
            threads=expand("{threads}", threads=config['threads'])
        shell:
            """
            python {rules.get_paths.input.holopath}/bin/holo-variant_BCFtools.py  -Dquality {params.data_quality} -bam_dir {input} -out_dir {output} -ref_g {params.ref_genome} -chr_list {params.chr_list} -degr_mapp_qual {params.degr_mapp_qual} -min_mapp_qual {params.min_mapp_qual} -min_base_qual {params.min_base_qual} -multicaller {params.multicaller} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
            """


    ## HD Filtering
    # If these are high depth files, then the called variants will be filtered as a step towards the creation of a reference panel.

    if config['data_quality'] == "HD":

        rule bcf_filter:
            input:
                "{projectpath}/GNM_01-CalledVar/{group}"
            output:
                directory("{projectpath}/GNM_02-Filtering/{group}")
            params:
                chr_list=expand("{chr_list}", chr_list=config['chr_list']),
                QUAL=expand("{QUAL}", QUAL=config['QUAL']),
                group="{group}",
                threads=expand("{threads}", threads=config['threads'])
            shell:
                """
                python {rules.get_paths.input.holopath}/bin/holo-filter_BCF.py -var_dir {input} -out_dir {output} -chr_list {params.chr_list} -QUAL {params.QUAL} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
                """



# GATK as variant caller - selected by user in .py launcher command and then uploaded to config file by .py launcher

if config['var_caller'] == "gatk":
    ##
    # run GATK per sample and chromosome - one file per combination
    ##
    rule get_samples:
        input:
            "{projectpath}/GNM_00-InputBams/{group}"
        output:
            directory("{projectpath}/GNM_01-CalledVar/individual_samples/{group}")
        params:
            min_pruning=expand("{min_pruning}", min_pruning=config['min_pruning']),
            min_dangling=expand("{min_dangling}", min_dangling=config['min_dangling']),
            chr_list=expand("{chr_list}", chr_list=config['chr_list']),
            ref_genome=expand("{reference_genome}", reference_genome=config['reference_genome']),
            group="{group}",
            threads=expand("{threads}", threads=config['threads'])
        shell:
            """
            python {rules.get_paths.input.holopath}/bin/holo-variant_GATK_indv.py -bam_dir {input} -out_dir {output} -ref_g {params.ref_genome} -chr_list {params.chr_list} -min_pruning {params.min_pruning} -min_dangling {params.min_dangling} -ID {params.group} -t {params.threads} -log {rules.get_paths.input.logpath}
            """


    ##
    # run GATK per chromosome on all group - merge all of one chr files per all samples in group, obtain same output as BCF
    ##
    rule get_group:
        input:
            "{projectpath}/GNM_01-CalledVar/individual_samples/{group}"
        output:
            directory("{projectpath}/GNM_01-CalledVar/{group}")
        params:
            ref_genome=expand("{reference_genome}", reference_genome=config['reference_genome']),
            chr_list=expand("{chr_list}", chr_list=config['chr_list']),
            data_quality=expand("{data_quality}", data_quality=config['data_quality']),
            group="{group}",
            threads=expand("{threads}", threads=config['threads'])
        shell:
            """
            python {rules.get_paths.input.holopath}/bin/holo-variant_GATK_chr.py -Dquality {params.data_quality} -vcf_dir {input} -out_dir {output} -ref_g {params.ref_genome} -chr_list {params.chr_list} -ID {params.group} -t {params.threads} -log {rules.get_paths.input.logpath}
            """

    ## HD Filtering
    # If these are high depth files, then the called variants will be filtered as a step towards the creation of a reference panel.

    if config['data_quality'] == "HD":

        rule gatk_filter:
            input:
                "{projectpath}/GNM_01-CalledVar/{group}"
            output:
                directory("{projectpath}/GNM_02-Filtering/{group}")
            params:
                QUAL=expand("{QUAL}", QUAL=config['QUAL']),
                QD=expand("{QD}", QD=config['QD']),
                FS=expand("{FS}", FS=config['FS']),
                chr_list=expand("{chr_list}", chr_list=config['chr_list']),
                group="{group}",
                threads=expand("{threads}", threads=config['threads'])
            shell:
                """
                python {rules.get_paths.input.holopath}/bin/holo-filter_GATK.py -var_dir {input} -out_dir {output} -chr_list {params.chr_list} -QUAL {params.QUAL} -QD {params.QD} -FS {params.FS} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
                """


## HD Phasing
# If these are high depth files, after the filtering of the variants, phasing will lead to the generation of a reference panel for LD samples

if config['data_quality'] == "HD":

    rule phasing:
        input:
            "{projectpath}/GNM_02-Filtering/{group}"
        output:
            directory("{projectpath}/GNM_03-Phasing/{group}")
        params:
            gmap=expand("{gmap}", gmap=config['gmap']),
            chr_list=expand("{chr_list}", chr_list=config['chr_list']),
            geno=expand("{geno}", geno=config['geno']),
            group="{group}",
            threads=expand("{threads}", threads=config['threads'])
        shell:
            """
            python {rules.get_paths.input.holopath}/bin/holo-phasing.py -filt_dir {input} -out_dir {output} -chr_list {params.chr_list} -gmap {params.gmap} -geno {params.geno} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
            """


# #ANGSD as variant caller
# Sofi is not sure this is relevant in our context: too complex and probably won't make a big difference

# if (config['var_caller'] == "angsd") and (config['data_quality'] == "LD"):
#
#     ##
#     # call variants with ANGSD
#     ##
#     rule angsd_run:
#         input:
#             "{projectpath}/GNM_00-InputBams/{group}"
#         output:
#             directory("{projectpath}/GNM_01-CalledVar/{group}")
#         params:
#             model=expand("{model}", model=config['model']),
#             output_logL=expand("{output_logL}", output_logL=config['output_logL']),
#             major_minor=expand("{major_minor}", major_minor=config['major_minor']),
#             ref_genome=expand("{reference_genome}", reference_genome=config['reference_genome']),
#             chr_list=expand("{chr_list}", chr_list=config['chr_list']),
#             group="{group}",
#             threads=expand("{threads}", threads=config['threads'])
#         shell:



### Conditional LD
# If these are low depth samples, the obtained variants will have to be improved.
# This is done by updating the obtained likelihoods and then imputing, this depends on a reference panel
# whose path must be especified in the .py launcher command to be loaded to config.
# The reference panel can be the one outputted by this workflow or a pre-existing one.


if (config['data_quality'] == "LD") and (config['ref_panel_HD'] != ''):

    ### - LIKELIHOOD UPDATE

    rule ll_update:
        input:
            "{projectpath}/GNM_01-CalledVar/{group}"
        output:
            directory("{projectpath}/GNM_02-LLUpdate/{group}")
        params:
            var_caller = expand("{var_caller}", var_caller=config['var_caller']),
            ref_panel_HD = expand("{ref_panel_HD}", ref_panel_HD=config['ref_panel_HD']),
            chr_list=expand("{chr_list}", chr_list=config['chr_list']),
            group="{group}",
            threads=expand("{threads}", threads=config['threads'])
        shell:
            """
            python {rules.get_paths.input.holopath}/bin/holo-likelihoods_upd.py -var_dir {input} -out_dir {output} -vc {params.var_caller} -ref_panel {params.ref_panel_HD} -chr_list {params.chr_list} -ID {params.group} -t {params.threads} -log {rules.get_paths.input.logpath}
            """


    ### - IMPUTATION

    rule imputation:
        input:
            "{projectpath}/GNM_02-LLUpdate/{group}"
        output:
            directory("{projectpath}/GNM_03-Imputation/{group}")
        params:
            ref_panel_HD = expand("{ref_panel_HD}", ref_panel_HD=config['ref_panel_HD']),
            chr_list=expand("{chr_list}", chr_list=config['chr_list']),
            group="{group}",
            threads=expand("{threads}", threads=config['threads'])
        shell:
            """
            python {rules.get_paths.input.holopath}/bin/holo-imputation.py -upd_dir {input} -out_dir {output} -ref_panel {params.ref_panel_HD} -chr_list {params.chr_list} -ID {params.group} -t {params.threads} -log {rules.get_paths.input.logpath}
            """
